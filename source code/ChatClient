from socket import *
from tkinter import *
from tkinter.scrolledtext import ScrolledText
from tkinter import messagebox
from threading import *
from modulefinder import *
import sqlite3





class ChatClient:
    client_socket = None


    def __init__(self):
        """ChatClient클래스 생성자"""
        self.initialize_socket(ip, port)
        self.initalize_UI()
        self.listen_thread()


    def initialize_socket(self, ip, port):
        """클라이언트 소켓을 생성하고, 서버의 주소와 포트로 서버와 연결"""
        self.client_socket = socket(AF_INET, SOCK_STREAM)
        remote_ip = ip
        remote_port = port
        self.client_socket.connect((remote_ip, remote_port))


    def send_chat(self):
        """클라이언트가 입력한 메시지를 서버에 전송해주는 메소드"""
        senders_name = self.name + ":"
        data = self.enter_text_widget.get(1.0, 'end').strip()
        message = (senders_name + data).encode('utf-8')
        self.chat_transcript_area.insert('end', message.decode('utf-8') + '\n')
        self.chat_transcript_area.yview(END)
        self.client_socket.send(message)
        self.enter_text_widget.delete(1.0, 'end')
        return 'break'


    def ensend_chat(self,e):
        """메세지 엔터키 인벤트"""
        self.send_chat()


    def initalize_UI(self):
        """UI정보들이 있는 메소드"""

        self.root = Tk()
        self.root.title('Chating')
        self.root.bind('<Return>', self.ensend_chat)

        # 로그인UI
        self.id = Label(self.root, text='아이디')
        self.pw = Label(self.root, text='비밀번호')
        self.en_id = Entry(self.root)
        self.en_pw = Entry(self.root)
        self.btn_login = Button(self.root, text='로그인', command=self.main_login)
        self.btn_addMember = Button(self.root, text='회원가입', command=self.click_addMember)
        self.id.grid(row=0, column=0)
        self.pw.grid(row=1, column=0)
        self.en_id.grid(row=0, column=1)
        self.en_pw.grid(row=1, column=1)
        self.btn_login.grid(row=2, column=0)
        self.btn_addMember.grid(row=2, column=1)

        # 회원가입 UI
        self.add_id = Label(self.root, text='아이디')
        self.add_pw = Label(self.root, text='비밀번호')
        self.add_pw2 = Label(self.root, text="비밀번호 확인")
        self.adden_id = Entry(self.root)
        self.adden_pw = Entry(self.root)
        self.adden_pw2 = Entry(self.root)
        self.btn_idch = Button(self.root, text='중복확인', command=self.chMember)
        self.btn_add = Button(self.root, text='회원가입', command=self.addMember)

        # 채팅 UI
        self.name_label = Label(self.root, text='Message')
        # self.recv_label = Label(self.root, text = '수신 메시지 : ')
        self.send_label = Label(self.root, text='송신 메시지 : ')
        self.send_btn = Button(self.root, text='전송', command=self.send_chat)
        self.chat_transcript_area = ScrolledText(self.root, height=20, width=60)
        self.enter_text_widget = ScrolledText(self.root, height=5, width=60)
        self.name_widget = Entry(self.root, width=15)

        # 로그인UI
        self.reid = Label(self.root, text='아이디')
        self.repw = Label(self.root, text='비밀번호')
        self.reen_id = Entry(self.root)
        self.reen_pw = Entry(self.root)
        self.rebtn_login = Button(self.root, text='로그인', command=self.remain_login)
        self.rebtn_addMember = Button(self.root, text='회원가입', command=self.click_addMember)


    def main_login(self):
        """사용자가 입력한 아이디와 비밀번호 DB에서 확인"""
        id = self.en_id.get()
        pw = self.en_pw.get()
        conn = sqlite3.connect('TcpMember.db')
        cur = conn.cursor()
        cur.execute(" SELECT * FROM member")
        rows = cur.fetchall()
        conn.commit()
        conn.close()
        for row in rows:
            if row[0] == id and row[1] == pw:
                self.name = id
                self.mainUI()
                break

    def remain_login(self):
        """다시만든 로그인 UI객체들로부터 id,pw확인후 로그인하는 메소드"""
        id = self.reen_id.get()
        pw = self.reen_pw.get()
        conn = sqlite3.connect('TcpMember.db')
        cur = conn.cursor()
        cur.execute(" SELECT * FROM member")
        rows = cur.fetchall()
        conn.commit()
        conn.close()
        for row in rows:
            if row[0] == id and row[1] == pw:
                self.name = id
                self.mainUI()
                break


    def click_addMember(self):
        """회원가입 버튼을 누르면 회원가입UI를 보여주는 메소드"""
        self.id.destroy()
        self.pw.destroy()
        self.en_id.destroy()
        self.en_pw.destroy()
        self.btn_login.destroy()
        self.btn_addMember.destroy()
        self.add_id.grid(row=0, column=0)
        self.add_pw.grid(row=1, column=0)
        self.add_pw2.grid(row=2, column=0)
        self.adden_id.grid(row=0, column=1)
        self.adden_pw.grid(row=1, column=1)
        self.adden_pw2.grid(row=2, column=1)
        self.btn_idch.grid(row=0, column=2)
        self.btn_add.grid(row=3, column=0, columnspan=2)


    def chMember(self):
        """DB에 id중복 확인"""
        flag = True
        conn = sqlite3.connect('TcpMember.db')
        cur = conn.cursor()
        cur.execute(" SELECT * FROM member")
        rows = cur.fetchall()
        for row in rows:
            if row[0] == self.adden_id.get():
                flag = False
                break
        if flag == True:
            messagebox.showinfo("Login", "사용가능한 아이디입니다")
        else:
            messagebox.showwarning('경고', '사용불가능한 아이디입니다')
            self.adden_id.delete(0, END)
        conn.commit()
        conn.close()

    def addMember(self):
        """비밀번호 확인하고 DB에 사용자 정보 INSERT 다시 로그인 UI"""
        addid = self.adden_id.get()
        pw = self.adden_pw.get()
        pw2 = self.adden_pw2.get()
        if pw == pw2:
            conn = sqlite3.connect('TcpMember.db')
            cur = conn.cursor()
            cur.execute("INSERT INTO member(id, pw) VALUES('{0}', '{1}')".format(addid, pw))
            conn.commit()
            conn.close()
            messagebox.showinfo("회원가입", "회원가입이 되었습니다")
            self.relogin()
        elif pw != pw2:
            messagebox.showerror("Error", "비밀번호를 확인하세요")
            self.adden_pw.delete(0, END)
            self.adden_pw2.delete(0, END)

    def relogin(self):
        """회원가입후 기존의 로그인페이지 객체가 없어져 새로운 객체로 다시 만듬"""
        self.add_id.destroy()
        self.add_pw.destroy()
        self.add_pw2.destroy()
        self.adden_id.destroy()
        self.adden_pw.destroy()
        self.adden_pw2.destroy()
        self.btn_idch.destroy()
        self.btn_add.destroy()
        self.reid.grid(row=0, column=0)
        self.repw.grid(row=1, column=0)
        self.reen_id.grid(row=0, column=1)
        self.reen_pw.grid(row=1, column=1)
        self.rebtn_login.grid(row=2, column=0)
        self.rebtn_addMember.grid(row=2, column=1)

    def mainUI(self):
        """채팅화면 UI를 보여줌"""
        self.id.destroy()
        self.pw.destroy()
        self.en_id.destroy()
        self.en_pw.destroy()
        self.btn_login.destroy()
        self.btn_addMember.destroy()
        self.reid.destroy()
        self.repw.destroy()
        self.reen_id.destroy()
        self.reen_pw.destroy()
        self.rebtn_login.destroy()
        self.rebtn_addMember.destroy()

        self.name_label.grid(row=0, column=0, columnspan=3)
        self.chat_transcript_area.grid(row=1, column=1, columnspan=3)
        self.enter_text_widget.grid(row=2, column=0, columnspan=2)
        self.send_btn.grid(row=2, column=2)


    def enter(self, e):
        """채팅 엔터키 이벤트"""
        self.send_chat()


    def listen_thread(self):
        """쓰레드 실행"""
        t = Thread(target=self.receive_message, args=(self.client_socket,))
        t.start()


    def receive_message(self, so):
        """서버로부터 메시지 받는 메소드"""
        while True:
            buf = so.recv(256)
            if not buf:
                break
            self.chat_transcript_area.insert('end', buf.decode('utf-8') + '\n')
            self.chat_transcript_area.yview(END)
        so.close()



if __name__ == "__main__":
    ip = input("server Ip addr: ")
    if ip == '':
        ip = '127.0.0.1'
    port=2500
    ChatClient()
    mainloop()
